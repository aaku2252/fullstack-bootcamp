1. Create a collection--> 

db.createCollection("student")


2. Insert single record (data) in that collection of database -->

db.student.insertOne(
{
rollno:1,
name:'Akash',
phone:1234567891
}
)


3. displaying all records-->

db.student.find()


4. insert single record with index-->


db.student.insertOne(
{
_id : 1,
rollno:2,
name:'Ajay',
phone:1234567892
}
)


5. delete a single entry from collection -->

db.collection('yourCollectionName').deleteOne({ /* Filter */ })

db.student.update({*/ filter/*},{$unset:{*/  key name : ''/*}})


6. show databases and collections -->

show databases
show collections

7.  insert multiple records at a time -->

db.student.insertMany([{_id:2,rollno:2,name:'akash'},{_id:3,rollno:3,name:'ajay'},{_id:4,rollno:4,name:'rahul'},{_id:5,rollno:5,name:'manoj'}])

8.  find a specific data-->

db.student.find({name:'Akash'})


9. update the exisiting data from collections, filter from first {}, use set  in second {} and inside that gives value of set the new value we want to give.
It will add a new document (R) document if find condition does not matches and upsert is set to true .By default upsert is false we can set it to true if we want it. upsert is a optional data.-->

db.student.updateOne({_id:2},{$set:{name:'Manjeet'}},{upsert:true})


10.  Update many users fields at a time-->
 
db.student.updateMany({address:'narnaul'},{$set:{distt:'M.garh'}})


11. Delete a whole document from the collection-->

db.student.deleteOne({address:'kalba'})

12. If you want to replace the whole document, we need to provide all the fields of the new document-->

db.student.replaceOne({name:'Manjeet'},{
_id: 2,
  rollno: 102,
  name: 'Vedant',
  address: 'Jaipur',
  service: 'Pvt Employee'
})

13. Projection, finding specific data , it only shows the data where we set that key name equals to 1 else if we want to set something to hide then set that key name to 0, by default it shows the id if u dont want id then you can set id to 0-> 

db.student.find({},{_id:0,name:1})


14. Cursor methods helps in further getting the knowledge of find() method, find on steroids

db.student.find().pretty() --> simplify the result

db.student.find().explain('executionStats')  --> explains the behind the scene progress in execution of find

db.student.find().next()   --> first document out of the several similar items

db.student.find().hasNext()  --> if next() si true or not / atleast a single item

db.student.find().sort({name:1/-1})--> Sort the documents on name  if 1 then ascending/ if -1 then descending 

db.student.find().limit(3) --> show only top 3 records

db.student.find().skip(3) --> it skips first 3 records


-MONGODB-DAY2--------------------------------------------------------------------------------------------------------------

14. Query Operators  -->

	Comparison

	$eq: Values are equal
	$ne: Values are not equal
	$gt: Value is greater than another value
	$gte: Value is greater than or equal to another value
	$lt: Value is less than another value
	$lte: Value is less than or equal to another value


	db.items.find({price:{$eq:1000}})
	db.items.find({productname:{$eq:'Pen'}})

	db.items.find({price:{$gte:500}})
	db.items.find({quantity:{$lte:20}})




15. Logical   -->

	$and: Returns documents where both queries match
	$or: Returns documents where either query matches
	$nor: Returns documents where both queries fail to match
	$not: Returns documents where the query does not match


	db.items.find({$and:
		[
		{price:{$gt:50}},
		{price:{$lt:1500}}
		]
	})

	db.items.find({$or:
		[
		{quantity:{$eq:10}},
		{quantity:{$eq:50}}
		]
	})

	db.items.find({$nor:
		[
		{quantity:{$lte:10}},
		{quantity:{$gte:50}}
		]
	})

	db.student.insertMany([

	{_id:1,name:'suman',subject:['Math','Chemistry','Physics']},
	{_id:2,name:'aman',subject:['Biology','Chemistry','Physics']},
	{_id:3,name:'raman',subject:['History','Political','Civil']},
	{_id:4,name:'chetan',subject:['Accounts','Economics']},
	{_id:5,name:'puran',subject:['Zoology','Botany','English']},
	{_id:6,name:'ravina',subject:['Zoology','Chemistry','Botany']},

	])

16. Array operators  Works only for arrays--->

	$in: Value is matched within an array
	$nin: Value is not matched within an array
	$size: Checks the size of the item
	$all: Checks if the array contains all value
	$elemMatch: Checks if the array contains that item. It takes an conditional operator

	db.student.find({subject:{$in:['Zoology']}})
	db.student.find({subject:{$nin:['History','Math']}})
	db.student.find({subject:{$size:2}})
	db.student.find({subject:{$all:['Math']}})
	db.student.find({subject:{$elemMatch:{$eq:'Accounts'}}})

17. Elements Operators -->

	$exists:  used to check whether a field exists or not in a document. 
	$type: used to check the data type of a field string/number etc

	db.student.find({name:{$exists:true}})
	db.student.find({name:{$type:'string'}}) // only return only those if the name is in string data types

18. Update operators -->

	$currentDate: Sets the field value to the current date
	$inc: Increments the field value
	$rename: Renames the field
	$set: Sets the value of a field
	$unset: Removes the field from the document Array
	$min: sets the minimum value if the field is greater or if the earlier field value is less than it will exists as it was.
	$max : opposite to min, only sets if the given value is greater than the exisiting value


	$addToSet: Adds distinct elements to an array
	$pop: Removes the first or last element of an array
	$pull: Removes all elements from an array that match the query
	$push: Adds an element to an array
	$each: Adding multiple values to the array item
	$position: Adding the items at a particular position

	db.items.updateOne({productname:'Bag'},{$inc:{price:5}})
	db.items.updateOne({productname:'Bag'},{$min:{quantity:5}})

	db.student.deleteOne({section:{$exists:'A'}},{$pull:{section:''}})
	db.student.updateOne({_id:2},{$push:{subject:{$each:['Math','Music','Physics']}}})
	db.student.updateOne({_id:2},{$push:{subject:{$each:['Math','Music','Physics'],$position:0}}})


18.Evaluation   -->

	$regex: Allows the use of regular expressions when evaluating field values
	$text: Performs a text search
	$where: Uses a JavaScript expression to match documents



-------------------------------------------------------------------------------
19. Aggregations -->

	Multiple tasks at a time. refers to the process of transforming and manipulating documents in a collection to generate aggregated results. Aggregation provides a way to perform operations like grouping, filtering, sorting, and computing aggregate functions (e.g., sum, average, count) on the documents in a collection.

	Aggregation Pipeline Stages-->

	$match: Filters the documents to pass only those that match the specified condition(s).

	$group: Groups documents by a specified expression and applies accumulator expressions to create computed fields.

	$project: Reshapes documents by including, excluding, or adding fields.

	$sort: Orders the documents based on the specified fields.

	$limit: Limits the number of documents passed to the next stage.

	$skip: Skips a specified number of documents.

	$unwind: Deconstructs an array field from the input documents and outputs one document for each element.

	$lookup: Performs a left outer join to another collection in the same database to filter in documents from the "joined" collection for processing.

	$addFields: Adds new fields to documents.

	$replaceRoot: Replaces the input document with the specified document.

	$group: Groups input documents by a specified identifier expression and applies the accumulator expressions.

	$count: Returns a count of the number of documents at this stage of the aggregation pipeline.


     db.student.aggregate([
	{$match:{_id:2}},
	{$project:{name:1}},
	 ])
	 // now first it will match and then project the data

	 db.student.aggregate([
		{$group:{_id:1,sumOfDegree:{$sum:'$degree'}}}
		])

	db.student.aggregate([
		{$match:{$eq:{_id:1}}},

		{$set:{class:'Final Year'}},
	])















